@page "/fetchdata"
@using GTAVehicles.Data
@using GTAVehicles.Models
@using System.Linq;
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<GTAVehiclesService>

<h1>GTA Player Characters</h1>

<p>Click the arrow next to each character to see the garages owned by that character. Edit character names/colors with the blue Edit button.</p>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity.Name!</h4>
        @if (player == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" Data="@characters" TItem="GtaplayerCharacters" ColumnWidth="200px">
                <Template Context="character">
                    <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" Data="character.GtaplayerGarages" TItem="GtaplayerGarages">
                        <Columns>
                            <RadzenGridColumn TItem="GtaplayerGarages" Property="GarageId" Title="Garage ID#" />
                            <RadzenGridColumn TItem="GtaplayerGarages" Property="GarageName" Title="Garage Name" />
                        </Columns>
                    </RadzenGrid>
                </Template>
                <Columns>
                    <RadzenGridColumn TItem="GtaplayerCharacters" Property="CharacterName" Title="Character Name" />
                    <RadzenGridColumn TItem="GtaplayerCharacters" Property="CharacterColor" Title="Associated Color" />
                    <RadzenGridColumn TItem="GtaplayerCharacters" Property="character" Title="Edit" Width="20px">
                        <Template Context="character">
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                          Click="@(() => EditCharacter(character))" Icon="edit" Style="align-content:center;">
                            </RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                </Columns>
            </RadzenGrid>
            <p>
                <!-- Add a new character -->
                <button class="btn btn-primary"
                        @onclick="AddNewCharacter">
                    Add New Character
                </button>
            </p>
        }  @if (ShowPopup)
        {<!-- This is the popup to create or edit a SelectedCharacter --> <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Edit Character</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Edit form for the current character -->
                        <div class="modal-body">
                            <input class="form-control" type="text"
                                   placeholder="Character Name"
                                   @bind="SelectedCharacter.CharacterName" />
                            <input class="form-control" type="text"
                                   placeholder="Color associated with this Character"
                                   @bind="SelectedCharacter.CharacterColor" />
                            <!--RadzenDropDown>

                                <Template>

                                    Company:

                                </Template>

                            </RadzenDropDown-->
                            <br />
                            <!-- Button to save the character -->
                            <button class="btn btn-primary"
                                    @onclick="SaveCharacter">
                                Save
                            </button>
                            <!-- Only show delete button if not a new record -->
                            @if (SelectedCharacter.Id > 0)
                            {
                                <!-- Button to delete the character -->
                                <button class="btn btn-primary"
                                        @onclick="DeleteCharacter">
                                    Delete
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    Gtaplayers player;
    List<GtaplayerCharacters> characters;
    GtaplayerCharacters SelectedCharacter;
    List<GtaplayerGarages> garages;
    bool ShowPopup = false;



    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;
        if (user.Identity.Name != null)
        {
            // Get the player object for the current user
            player = await @Service.GetPlayerAsync(user.Identity.Name);

            // Get the character(s) for that player
            characters = await @Service.GetCharactersAsync(player);

            // Get the garage(s) for a character
            garages = await @Service.GetGaragesAsync(SelectedCharacter);
        }
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewCharacter()
    {
        // Make new Character
        SelectedCharacter = new GtaplayerCharacters();
        // Set Id to 0 so we know it is a new record
        SelectedCharacter.Id = 0;
        //Set the player to the current user
        SelectedCharacter.PlayerID = player.Id;
        // Open the Popup
        ShowPopup = true;
    }

    void EditCharacter(GtaplayerCharacters objGtaplayerCharacter)
    {
        // Set the selected character
        // as the current character
        SelectedCharacter = objGtaplayerCharacter;
        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveCharacter()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new forecast will have the Id set to 0
        if (SelectedCharacter.Id == 0)
        {
            // Save the result
            var result =
            @Service.CreateCharacterAsync(SelectedCharacter);
        }
        else
        {
            // This is an update
            var result =
            @Service.UpdateCharacterAsync(SelectedCharacter);
        }
        // Get the forecasts for the current user
        characters = await @Service.GetCharactersAsync(player);
    }

    async Task DeleteCharacter()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Delete the forecast
        var result = @Service.DeleteCharacterAsync(SelectedCharacter);
        // Get the forecasts for the current user
        characters = await @Service.GetCharactersAsync(player);
    }

    public sealed class CharColors
    {
        private CharColors() { }

        public static readonly string Beige = "Beige";
        public static readonly string Black = "Black";
        public static readonly string Blue = "Blue";
        public static readonly string Brown = "Brown";
        public static readonly string Cyan = "Cyan";
        public static readonly string Gold = "Gold";
        public static readonly string Gray = "Gray";
        public static readonly string Green = "Green";
        public static readonly string Indigo = "Indigo";
        public static readonly string Lime = "Lime";
        public static readonly string Magenta = "Magenta";
        public static readonly string Maroon = "Maroon";
        public static readonly string Navy = "Navy";
        public static readonly string Olive = "Olive";
        public static readonly string Orange = "Orange";
        public static readonly string Pink = "Pink";
        public static readonly string Purple = "Purple";
        public static readonly string Red = "Red";
        public static readonly string Silver = "Silver";
        public static readonly string Teal = "Teal";
        public static readonly string Turquoise = "Turquoise";
        public static readonly string Violet = "Violet";
        public static readonly string White = "White";
        public static readonly string Yellow = "Yellow";
    }

}

