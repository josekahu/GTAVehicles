@page "/fetchdata"
@using GTAVehicles.Data
@using GTAVehicles.Models
@using System.Linq;
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<GTAVehiclesService>

<h1>GTA Player Characters</h1>

<p>Click the arrow next to each character to see the garages owned by that character. Edit character names/colors with the blue Edit button.</p>
<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity.Name!</h4>
        @if (player == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <p>
                <!-- Add a new character -->
                <RadzenButton ButtonStyle="ButtonStyle.Success"
                              Click="AddNewCharacter" Text="Add New Character" />
            </p>
            <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" Data="@characters" TItem="GtaplayerCharacters" ColumnWidth="200px">
                <Template Context="character">
                    <!-- Character Garages -->
                    <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" Data="character.GtaplayerGarages" TItem="GtaplayerGarages">
                        <Columns>
                            <RadzenCard Style="margin-bottom:20px">
                                <!-- Add a new garage -->
                                <RadzenButton ButtonStyle="ButtonStyle.Success"
                                              Click="AddNewGarage" Text="Add New Garage" />
                            </RadzenCard>
                            <RadzenGridColumn TItem="GtaplayerGarages" Property="garage" Title="Edit" Width="75px">
                                <Template Context="garage">
                                    <RadzenButton ButtonStyle="ButtonStyle.Success"
                                                  Click="@(() => EditGarage(garage))" Icon="edit">
                                    </RadzenButton>
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="GtaplayerGarages" Property="GarageName" Title="Garage Name" />
                        </Columns>
                    </RadzenGrid>
                </Template>
                <Columns>
                    <RadzenGridColumn TItem="GtaplayerCharacters" Property="character" Title="Edit" Width="50px">
                        <Template Context="character">
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                          Click="@(() => EditCharacter(character))" Icon="edit">
                            </RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="GtaplayerCharacters" Property="CharacterName" Title="Character Name" />
                    <RadzenGridColumn TItem="GtaplayerCharacters" Property="CharacterColor" Title="Associated Color" />
                </Columns>
            </RadzenGrid>
        }
        @if (ShowCharPopup)
        {<!-- This is the popup to create or edit a SelectedCharacter -->
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add/Edit Character</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="CloseCharPopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Edit form for the current character -->
                        <div class="modal-body">

                            <div class="row">
                                <div class="align-items-center d-flex col-md-6">
                                    <RadzenTextBox Placeholder="Character Name" @bind-Value="@SelectedCharacter.CharacterName" Style="margin-bottom: 20px" />
                                </div>
                                <div class="col-md-6">
                                    <RadzenDropDown @bind-Value="SelectedGtavehicleColor" Data="@colGtavehicleColors" Placeholder="Associated Color...">
                                        <Template Context="color">
                                            <div style="background-color: @((color as GtavehicleColors).BackgroundColor);color: @((color as GtavehicleColors).ForegroundColor); ">@((color as GtavehicleColors).ColorName)</div>
                                        </Template>
                                    </RadzenDropDown>
                                </div>
                            </div>

                            <br />
                            <!-- Button to save the character -->
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                          Click="SaveCharacter" Text="Save" />

                            <!-- Only show delete button if not a new record -->
                            @if (SelectedCharacter.Id > 0)
                            {
                                <!-- Button to delete the character -->
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="DeleteCharacter" Text="Delete" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (ShowGaragePopup)
        {<!-- This is the popup to create or edit a SelectedGarage -->
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Add/Edit Garage</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="CloseGaragePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Edit form for the current garage -->
                        <div class="modal-body">
                            <input class="form-control" type="text"
                                   placeholder="Garage Name"
                                   @bind="SelectedGarage.GarageName" />
                            <br />
                            <!-- Button to save the garage -->
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                          Click="SaveGarage" Text="Save" />

                            <!-- Only show delete button if not a new record -->
                            @if (SelectedGarage.Id > 0)
                            {
                                <!-- Button to delete the garage -->
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="DeleteGarage" Text="Delete" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in. Please click [Log-In] to continue.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    GtavehicleColors SelectedGtavehicleColor;
    List<GtavehicleColors> colGtavehicleColors = new List<GtavehicleColors>();
    Gtaplayers player;
    List<GtaplayerCharacters> characters;
    GtaplayerCharacters SelectedCharacter;
    List<GtaplayerGarages> garages;
    GtaplayerGarages SelectedGarage;
    bool ShowCharPopup = false;
    bool ShowGaragePopup = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;
        if (user.Identity.Name != null)
        {
            // Get the player object for the current user
            player = await @Service.GetPlayerAsync(user.Identity.Name);

            // Get the character(s) for that player
            characters = await @Service.GetCharactersAsync(player);
        }

        getGtavehicleColors();
    }

    void CloseCharPopup()
    {
        // Close the Popup
        ShowCharPopup = false;
    }

    void AddNewCharacter()
    {
        // Make new Character
        SelectedCharacter = new GtaplayerCharacters();
        // Set Id to 0 so we know it is a new record
        SelectedCharacter.Id = 0;
        //Set the player to the current user
        SelectedCharacter.PlayerID = player.Id;
        // Open the Popup
        ShowCharPopup = true;
    }

    void EditCharacter(GtaplayerCharacters objGtaplayerCharacter)
    {
        // Set the selected character
        // as the current character
        SelectedCharacter = objGtaplayerCharacter;
        SelectedGtavehicleColor = (from colors in colGtavehicleColors
                                   where colors.ColorName == objGtaplayerCharacter.CharacterColor
                                   select colors).FirstOrDefault();
        // Open the Popup
        ShowCharPopup = true;
    }

    async Task SaveCharacter()
    {
        // Close the Popup
        ShowCharPopup = false;
        // Set associated color to dropdown choice (black if nothing selected)
        if (SelectedGtavehicleColor != null) { SelectedCharacter.CharacterColor = SelectedGtavehicleColor.ColorName; }
        else { SelectedCharacter.CharacterColor = "Black"; }

        // Get the current user
        var user = (await authenticationStateTask).User;
        // A new character will have the Id set to 0
        if (SelectedCharacter.Id == 0)
        {
            // Save the result
            var result =
            @Service.CreateCharacterAsync(SelectedCharacter);
        }
        else
        {
            // This is an update
            var result =
            @Service.UpdateCharacterAsync(SelectedCharacter);
        }
        // Get the characters for the current user
        characters = await @Service.GetCharactersAsync(player);
    }

    async Task DeleteCharacter()
    {
        // Close the Popup
        ShowCharPopup = false;
        // Get the current user
        var user = (await authenticationStateTask).User;
        // Delete the forecast
        var result = @Service.DeleteCharacterAsync(SelectedCharacter);
        // Get the forecasts for the current user
        characters = await @Service.GetCharactersAsync(player);
    }

    void CloseGaragePopup()
    {
        // Close the Popup
        ShowGaragePopup = false;
    }

    void AddNewGarage()
    {
        // Create new Garage for Character
        SelectedGarage = new GtaplayerGarages() { Character = SelectedCharacter };
        // Open the Popup
        ShowGaragePopup = true;
    }

    void EditGarage(GtaplayerGarages objGtaplayerGarage)
    {
        // Set teh selected garage
        SelectedGarage = objGtaplayerGarage;
        // Open the Popup
        ShowGaragePopup = true;
    }

    async Task SaveGarage()
    {
        CloseGaragePopup();
        if (SelectedGarage.Id == 0)
        {
            var result = @Service.CreateGarageAsync(SelectedGarage);
        }

        garages = await @Service.GetGaragesAsync(SelectedCharacter);
    }

    async Task DeleteGarage() { CloseGaragePopup(); }

    List<string>
    CharColors = new List<string>
        () { "Beige", "Black", "Blue", "Brown", "Cyan", "Gold", "Gray", "Green", "Indigo", "Lime", "Magenta", "Maroon", "Navy", "Olive", "Orange", "Pink", "Purple", "Red", "Silver", "Teal", "Turquoise", "Violet", "White", "Yellow" };

    void getGtavehicleColors()
    {
        colGtavehicleColors = new List<GtavehicleColors>
            ();

        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Beige", BackgroundColor = "Beige", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Black", BackgroundColor = "Black", ForegroundColor = "White" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Blue", BackgroundColor = "Blue", ForegroundColor = "White" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Brown", BackgroundColor = "Brown", ForegroundColor = "White" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Cyan", BackgroundColor = "Cyan", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Gold", BackgroundColor = "Gold", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Gray", BackgroundColor = "Gray", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Green", BackgroundColor = "Green", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Indigo", BackgroundColor = "Indigo", ForegroundColor = "White" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Lime", BackgroundColor = "Lime", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Magenta", BackgroundColor = "Magenta", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Maroon", BackgroundColor = "Maroon", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Navy", BackgroundColor = "Navy", ForegroundColor = "White" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Olive", BackgroundColor = "Olive", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Orange", BackgroundColor = "Orange", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Pink", BackgroundColor = "Pink", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Purple", BackgroundColor = "Purple", ForegroundColor = "White" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Red", BackgroundColor = "Red", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Silver", BackgroundColor = "Silver", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Teal", BackgroundColor = "Teal", ForegroundColor = "White" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Turquoise", BackgroundColor = "Turquoise", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Violet", BackgroundColor = "Violet", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "White", BackgroundColor = "White", ForegroundColor = "Black" });
        colGtavehicleColors.Add(new GtavehicleColors { ColorName = "Yellow", BackgroundColor = "Yellow", ForegroundColor = "Black" });
    }
}

