@page "/"
@using GTAVehicles.Data
@using GTAVehicles.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in GTAVehiclesService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access GTAVehiclesService using @Service
*@
@inherits OwningComponentBase<GTAVehiclesService>

<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity.Name!</h4>
    </Authorized>
    <NotAuthorized>
        <h1>Welcome, visitor!</h1>
        <p>Sign in to assign vehicles to your in-game garage.</p>
    </NotAuthorized>
</AuthorizeView>

@strerror
<div class="row">
    <div class="col-md-6">
        <RadzenDropDown AllowFiltering="false"
                        AllowClear="true"
                        @bind-Value="SelectedVehicleClasses"
                        Multiple="true"
                        Placeholder="Filter by Class(es)..."
                        Data="@vehicleClasses"
                        TextProperty="ClassName"
                        ValueProperty="Id"
                        Change="PerformSearch"
                        Style="margin-bottom: 20px; width:250px;" />
    </div>
</div>

@if (vehicles != null)
{
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="DataList">
                <RadzenDataList @ref="DataListRef" WrapItems="true" PageSize="12" AllowPaging="true" Data="vehicles" TItem="GTAVehiclesRanked">
                    <Template Context="vehicle">
                        <RadzenCard Style="width:320px; margin-bottom: 20px; height:260px;">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="row">
                                        <div class="col-md-8">#@vehicle.TrackRankInClass in <b>@vehicle.ClassName</b></div>
                                        <div class="col-md-4 align-items-end">@vehicle.TrackSpeed</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-1">&nbsp;</div>
                                        <div class="col-md-10 align-items-center"><RadzenImage Path="@string.Concat("images/", vehicle.VehicleModel.Replace(' ', '-').Replace('’', '-').Replace("/", "").Replace("(", "").Replace(")", "").ToLower(), ".jpg")" Style="width:300px;" Click="@(() => ShowVehicleDetail(vehicle))" /></div>
                                        <div class="col-md-1">&nbsp;</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-8"><h3>@vehicle.VehicleModel.ToUpper()</h3></div>
                                        <div class="col-md-4 align-items-end">@(String.Format(new System.Globalization.CultureInfo("en-US"), "{0:F}", vehicle.DragSpeed)) mph</div>
                                    </div>
                                </div>
                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenTabsItem>

            <RadzenTabsItem Text="DataGrid">
                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="12" AllowSorting="true" Data="vehicles" TItem="GTAVehiclesRanked" ColumnWidth="200px">
                    <Columns>
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="VehicleModel" Title="Vehicle Model" />
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="ClassName" Title="Class" />
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="TrackSpeed" Title="Fastest Track Time (mm:ss.sss)">
                            <Template Context="data">
                                @String.Concat(data.TrackSpeed, " (", data.TrackRankInClass, " in ", data.ClassName, ", ", data.TrackRank, " overall)")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="DragSpeed" Title="Straight-line Speed (mph)">
                            <Template Context="data">
                                @String.Format("{0:F}", data.DragSpeed) (@data.DragRankInClass in @data.ClassName, @data.DragRank overall)
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

@if (ShowVehiclePopup)
{<!-- This is the popup to view Vehicle details -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Vehicle Detail</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="CloseVehiclePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h3>@SelectedVehicle.VehicleModel</h3>
                            <p>
                                <b>Vehicle Class:</b> @SelectedVehicle.ClassName<br />
                                <b>Best Track Speed:</b> @SelectedVehicle.TrackSpeed<br />
                                <b>Track Rank (overall):</b> @SelectedVehicle.TrackRank<br />
                                <b>Track Rank (in class):</b> @SelectedVehicle.TrackRankInClass<br />
                                <b>Top Straight-Line Speed:</b> @(String.Format(new System.Globalization.CultureInfo("en-US"), "{0:F}", SelectedVehicle.DragSpeed)) mph<br />
                                <b>Drag Rank (overall):</b> @SelectedVehicle.DragRank<br />
                                <b>Drag Rank (in class):</b> @SelectedVehicle.DragRankInClass
                            </p>
                        </div>
                    </div>
                    <AuthorizeView>
                        <!-- Show this section if the user is logged in -->
                        <Authorized>
                            <div class="row">
                                <div class="col-md-6">
                                    <RadzenDropDown AllowFiltering="false"
                                                    @bind-Value="SelectedCharacterId"
                                                    Data="@characters"
                                                    TextProperty="UserName"
                                                    ValueProperty="Id"
                                                    Style="margin-bottom: 20px; width:250px;" />

                                    <RadzenDropDown AllowFiltering="false"
                                        AllowClear="true"
                                        @bind-Value="SelectedGarageId"
                                        Multiple="false"
                                        Placeholder="Filter by Garage(s)..."
                                        Data="@(garages.Where(o => o.CharacterId.ToString() == SelectedCharacterId))"
                                        TextProperty="GarageName"
                                        ValueProperty="Id"
                                        Style="margin-bottom: 20px; width:250px;" />
                                </div>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string strerror = "";
    RadzenDataList<GTAVehiclesRanked> DataListRef;
    List<GtavehicleDropdownClass> vehicleClasses = new List<GtavehicleDropdownClass>();
    IQueryable<GTAVehiclesRanked> vehicles;
    IEnumerable<string> SelectedVehicleClasses = new string[] { };
    GTAVehiclesRanked SelectedVehicle;
    bool ShowVehiclePopup;

    List<GtacharactersDTO> characters = new List<GtacharactersDTO>();
    string SelectedCharacterId = "";
    string SelectedGarageId;
    List<GtaplayerGaragesDTO> garages = new List<GtaplayerGaragesDTO>();

    protected override async Task OnInitializedAsync()
    {
        ShowVehiclePopup = false;

        // Get the current user
        var user = (await authenticationStateTask).User;

        if (user.Identity.Name != null)
        {
            // Is user in the players table
            var player = await @Service.GetPlayerAsync(user.Identity.Name);

            if (player == null)
            {
                // Add them to the Players table
                Gtaplayers NewGtAPlayer = new Gtaplayers();
                NewGtAPlayer.UserName = user.Identity.Name;
                var result = @Service.CreatePlayerAsync(NewGtAPlayer);
            }

            // Get the Garages for the logged in user
            garages = await @Service.GetGaragesForPlayerAsync(player);

            // Get the character(s) for that player
            var colCharacters = await @Service.GetCharactersAsync(player);

            foreach (var item in colCharacters)
            {
                characters.Add(new GtacharactersDTO { Id = item.Id.ToString(), UserName = item.CharacterName });
            }
        }

        // Get a list of vehicle classes for a dropdown selector
        var TempVehicleClasses = await @Service.GetGTAVehicleClassesAsync();

        foreach (var item in TempVehicleClasses)
        {
            GtavehicleDropdownClass newGtavehicleDropdownClass = new GtavehicleDropdownClass();
            newGtavehicleDropdownClass.Id = item.Id.ToString();
            newGtavehicleDropdownClass.ClassName = item.ClassName;

            vehicleClasses.Add(newGtavehicleDropdownClass);
        }

        try
        {
            await PerformSearch();
        }
        catch (Exception ex)
        {
            strerror = ex.GetBaseException().Message;
        }
    }

    async Task PerformSearch()
    {
        strerror = "";
        if (SelectedVehicleClasses.Count() > 0)
        {
            // Build list
            List<int> colIds = new List<int>();

            foreach (var item in SelectedVehicleClasses)
            {
                int intValue = Convert.ToInt32(item.ToString());
                colIds.Add(intValue);
            }

            // Get a list of all vehicles in the game
            vehicles = await @Service.GetGTAVehiclesRankedAsync(colIds);

            if (DataListRef != null)
            {
                DataListRef.FirstPage();
            }
        }
        else
        {
            // Get a list of all vehicles in the game
            List<int> DefaultValue = new List<int>() { 0 };
            vehicles = await @Service.GetGTAVehiclesRankedAsync(DefaultValue);
        }
    }

    async Task ShowVehicleDetail(GTAVehiclesRanked VehicleClicked)
    {
        ShowVehiclePopup = true;
        SelectedVehicle = VehicleClicked;
    }

    void CloseVehiclePopup()
    {
        // Close the Popup
        ShowVehiclePopup = false;
    }
}
