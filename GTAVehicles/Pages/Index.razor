@page "/"
@using GTAVehicles.Data
@using GTAVehicles.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in GTAVehiclesService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access GTAVehiclesService using @Service
*@
@inherits OwningComponentBase<GTAVehiclesService>

<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity.Name!</h4>
    </Authorized>
    <NotAuthorized>
        <h1>Welcome, visitor!</h1>
        <p>Sign in to assign vehicles to your in-game garage.</p>
    </NotAuthorized>
</AuthorizeView>

@strerror

<div class="row">
    <div class="col-md-8">
        <RadzenDropDown AllowFiltering="false"
                        AllowClear="true"
                        @bind-Value="SelectedVehicleClasses"
                        Multiple="true"
                        Placeholder="Filter by Class(es)..."
                        Data="@vehicleClasses"
                        TextProperty="ClassName"
                        ValueProperty="Id"
                        Change="PerformSearch"
                        Style="margin-bottom: 20px; width:250px;" />
    </div>
    <AuthorizeView>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <div class="col-md-4 align-items-end">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Click="@(() => VehicleAdministration(new GTAVehiclesRanked() { Id = 0 }))" Text="New Vehicle in Game" />
            </div>
        }
    </AuthorizeView>
</div>

@if (vehicles != null)
{
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="DataList">
                <RadzenDataList @ref="DataListRef" WrapItems="true" PageSize="12" AllowPaging="true" Data="vehicles" TItem="GTAVehiclesRanked">
                    <Template Context="vehicle">
                        <RadzenCard Style="width:320px; margin-bottom: 20px; height:260px;">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="row">
                                        <div class="col-md-8">#@vehicle.TrackRankInClass in <b>@vehicle.ClassName</b></div>
                                        <div class="col-md-4 align-items-end">@vehicle.TrackSpeed</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-1">&nbsp;</div>
                                        <div class="col-md-10 align-items-center"><RadzenImage Path="@string.Concat("images/", vehicle.VehicleModel.Replace(' ', '-').Replace('’', '-').Replace("/", "-").Replace("(", "").Replace(")", "").ToLower(), ".jpg")" Style="width:300px;" Click="@(() => ShowVehicleDetail(vehicle))" /></div>
                                        <div class="col-md-1">&nbsp;</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-8"><h3>@vehicle.VehicleModel.ToUpper()</h3></div>
                                        <div class="col-md-4 align-items-end">@(String.Format(new System.Globalization.CultureInfo("en-US"), "{0:F}", vehicle.DragSpeed)) mph</div>
                                    </div>
                                </div>
                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenTabsItem>

            <RadzenTabsItem Text="DataGrid">
                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="12" AllowSorting="true" Data="vehicles" TItem="GTAVehiclesRanked" ColumnWidth="200px"
                            RowSelect="@((vehicle) => ShowVehicleDetail(vehicle))">
                    <Columns>
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Context="vehicle" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                          Width="70px" Visible="isAdministrator">
                            <Template Context="vehicle">
                                <RadzenButton Icon="edit" Click="@(() => VehicleAdministration(vehicle))" Size="ButtonSize.Small">
                                </RadzenButton>
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="Id" Title="Owned" Visible="isLoggedIn" Width="70px">
                            <Template Context="data">
                                <!-- call a function that will create the RenderFragment -->
                                <!-- that will create RadzenIcon for each Character that owns the vehicle -->
                                @*<RadzenIcon Style="color: pink" Icon="account_circle" />
                                    <RadzenIcon Style="color: orange" Icon="account_circle" />*@
                                <p>@GetIcons(data.CharactersOwningVehicle)</p>
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="VehicleModel" Title="Vehicle Model" />
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="ClassName" Title="Class" />
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="TrackSpeed" Title="Fastest Track Time (mm:ss.sss)">
                            <Template Context="data">
                                @String.Concat(data.TrackSpeed, " (", data.TrackRankInClass, " in ", data.ClassName, ", ", data.TrackRank, " overall)")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="GTAVehiclesRanked" Property="DragSpeed" Title="Straight-line Speed (mph)">
                            <Template Context="data">
                                @String.Format("{0:F}", data.DragSpeed) (@data.DragRankInClass in @data.ClassName, @data.DragRank overall)
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}

@if (ShowVehiclePopup)
{<!-- This is the popup to view Vehicle details -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Vehicle Detail</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="CloseVehiclePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h3>@SelectedVehicle.VehicleModel</h3>
                            <p>
                                <b>Vehicle Class:</b> @SelectedVehicle.ClassName<br />
                                <b>Best Track Speed:</b> @SelectedVehicle.TrackSpeed<br />
                                <b>Track Rank (overall):</b> @SelectedVehicle.TrackRank<br />
                                <b>Track Rank (in class):</b> @SelectedVehicle.TrackRankInClass<br />
                                <b>Top Straight-Line Speed:</b> @(String.Format(new System.Globalization.CultureInfo("en-US"), "{0:F}", SelectedVehicle.DragSpeed)) mph<br />
                                <b>Drag Rank (overall):</b> @SelectedVehicle.DragRank<br />
                                <b>Drag Rank (in class):</b> @SelectedVehicle.DragRankInClass
                            </p>
                        </div>
                    </div>
                    <AuthorizeView>
                        <!-- Show this section if the user is logged in -->
                        <Authorized>
                            <div class="row">
                                <div class="col-md-6">
                                    <h3>Add Vehicle to Garage:</h3>
                                    <RadzenDropDown AllowFiltering="false"
                                                    @bind-Value="SelectedCharacterId"
                                                    Placeholder="Select Character..."
                                                    Data="@characters"
                                                    TextProperty="UserName"
                                                    ValueProperty="Id"
                                                    Style="margin-bottom: 20px; width:250px;" />
                                    <RadzenDropDown AllowFiltering="false"
                                                    AllowClear="true"
                                                    @bind-Value="SelectedGarageId"
                                                    Multiple="false"
                                                    Placeholder="Select Garage..."
                                                    Data="@(garages.Where(o => o.CharacterId.ToString() == SelectedCharacterId))"
                                                    TextProperty="GarageName"
                                                    ValueProperty="Id"
                                                    Style="margin-bottom: 20px; width:250px;" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@(() => StoreVehicle(SelectedGarageId))" Text="Add Vehicle to Garage" />
                                </div>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowAdminPopup)
{<!-- This is the popup for Admins to add new vehicles to app, and edit existing vehicles -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Vehicle Administration</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="CloseAdminPopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <span style="color:red">@strEditVehicleError</span>
                            <RadzenTextBox Placeholder="Vehicle Model" @bind-Value="@SelectedVehicle.VehicleModel" Style="margin-bottom: 20px" />
                            <RadzenDropDown AllowFiltering="false"
                                            AllowClear="false"
                                            @bind-Value="@SelectedVehicleClassId"
                                            Multiple="false"
                                            Placeholder="Vehicle Class"
                                            Data="@vehicleClasses"
                                            TextProperty="ClassName"
                                            ValueProperty="Id"
                                            Style="margin-bottom: 20px; width:250px;" />
                            <RadzenTextBox Placeholder="Track Time" @bind-Value="@SelectedVehicle.TrackSpeed" Style="margin-bottom: 20px" />
                            <RadzenTextBox Placeholder="Top Speed" @bind-Value="@SelectedVehicleDragSpeed" Style="margin-bottom: 20px" />

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="AddEditNewVehicle" Text="Save" />

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private RenderFragment GetIcons(string CharactersOwningVehicle)
    {
        // 1 - Split CharactersOwningVehicle into seperate characters
        // 2 - For each Character display an Icon
        // 3 - Make tooltip on each Icon display the character name
        // 4 - Make each Icon the prefered color of the Character

        RenderFragment Icons;

        if (CharactersOwningVehicle != null)
        {
            string[] Characters = CharactersOwningVehicle.Split(';');

            Icons = builder =>
            {
                foreach (var Character in Characters)
                {
                    // Create Tooltip
                    builder.OpenElement(0, "a");
                    builder.AddAttribute(1, "href", "#");
                    builder.AddAttribute(2, "data-toggle", "tooltip");
                    builder.AddAttribute(3, "title", Character);

                    builder.OpenComponent<RadzenIcon>(4);
                    builder.AddAttribute(5, "Icon", "account_circle");
                    builder.CloseComponent();

                    builder.CloseElement();                    
                }
            };
        }
        else
        {
            Icons = builder =>
            {
                builder.AddContent(1, "");
            };
        }

        return Icons;
    }

    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    bool isAdministrator = false;
    bool isLoggedIn = false;
    string currentuser = "";

    string strerror = "";
    string strEditVehicleError = "";
    RadzenDataList<GTAVehiclesRanked> DataListRef;
    List<GtavehicleDropdownClass> vehicleClasses = new List<GtavehicleDropdownClass>();
    IQueryable<GTAVehiclesRanked> vehicles;
    IEnumerable<string> SelectedVehicleClasses = new string[] { };
    GTAVehiclesRanked SelectedVehicle;
    string SelectedVehicleClassId = "";
    string SelectedVehicleDragSpeed = "";
    bool ShowVehiclePopup;
    bool ShowAdminPopup;

    Gtaplayers player;
    List<GtacharactersDTO> characters = new List<GtacharactersDTO>();
    string SelectedCharacterId = "";
    string SelectedGarageId;
    List<GtaplayerGaragesDTO> garages = new List<GtaplayerGaragesDTO>();

    protected override async Task OnInitializedAsync()
    {
        ShowVehiclePopup = false;
        ShowAdminPopup = false;

        // Get the current user
        var user = (await authenticationStateTask).User;

        if (user.Identity.Name != null)
        {
            isLoggedIn = true;
            currentuser = user.Identity.Name;
            isAdministrator = user.IsInRole(ADMINISTRATION_ROLE);

            // Is user in the players table
            player = await @Service.GetPlayerAsync(user.Identity.Name);

            if (player == null)
            {
                // Add them to the Players table
                Gtaplayers NewGtaplayer = new Gtaplayers();
                NewGtaplayer.UserName = user.Identity.Name;
                var result = @Service.CreatePlayerAsync(NewGtaplayer);
            }

            // Get the Garages for the logged in user
            garages = await @Service.GetGaragesForPlayerAsync(player);

            // Get the character(s) for that player
            var colCharacters = await @Service.GetCharactersAsync(player);

            foreach (var item in colCharacters)
            {
                characters.Add(new GtacharactersDTO { Id = item.Id.ToString(), UserName = item.CharacterName });
            }
        }

        // Get a list of vehicle classes for a dropdown selector
        var TempVehicleClasses = await @Service.GetGTAVehicleClassesAsync();

        foreach (var item in TempVehicleClasses)
        {
            GtavehicleDropdownClass newGtavehicleDropdownClass = new GtavehicleDropdownClass();
            newGtavehicleDropdownClass.Id = item.Id.ToString();
            newGtavehicleDropdownClass.ClassName = item.ClassName;

            vehicleClasses.Add(newGtavehicleDropdownClass);
        }

        try
        {
            await PerformSearch();
        }
        catch (Exception ex)
        {
            strerror = ex.GetBaseException().Message;
        }

        //if (user != null)       MOVED TO TOP!
        //{
        //    isAdministrator = user.IsInRole(ADMINISTRATION_ROLE);
        //}
    }

    async Task PerformSearch()
    {
        strerror = "";

        if (SelectedVehicleClasses.Count() > 0)
        {
            // Build list
            List<int> colIds = new List<int>();

            foreach (var item in SelectedVehicleClasses)
            {
                int intValue = Convert.ToInt32(item.ToString());
                colIds.Add(intValue);
            }

            // Get a list of all vehicles in the game
            vehicles = await @Service.GetGTAVehiclesRankedAsync(currentuser, colIds);

            if (DataListRef != null)
            {
                DataListRef.FirstPage();
            }
        }
        else
        {
            // Get a list of all vehicles in the game
            List<int> DefaultValue = new List<int>() { 0 };
            vehicles = await @Service.GetGTAVehiclesRankedAsync(currentuser, DefaultValue);
        }
    }

    void ShowVehicleDetail(GTAVehiclesRanked VehicleClicked)
    {
        ShowVehiclePopup = true;
        SelectedVehicle = VehicleClicked;
    }

    async Task StoreVehicle(string GarageId)
    {
        GtaplayerVehicles StoredVehicle = new GtaplayerVehicles();

        StoredVehicle.PlayerGarageId = Convert.ToInt32(GarageId);
        StoredVehicle.VehicleId = SelectedVehicle.Id;
        StoredVehicle.PlayerId = player.Id;

        var result = await @Service.StoreVehicleAsync(StoredVehicle);

        CloseVehiclePopup();
    }

    void CloseVehiclePopup()
    {
        // Close the Popup
        ShowVehiclePopup = false;
    }

    void VehicleAdministration(GTAVehiclesRanked objGTAVehiclesRanked)
    {
        strEditVehicleError = "";
        ShowAdminPopup = true;
        if (objGTAVehiclesRanked.Id == 0) // New Vehicle
        {
            SelectedVehicleClassId = "";
            SelectedVehicleDragSpeed = "0.00";
            SelectedVehicle = new GTAVehiclesRanked() { Id = 0 };
        }
        else
        {
            SelectedVehicle = objGTAVehiclesRanked;
            SelectedVehicleClassId = SelectedVehicle.ClassId.ToString();
            SelectedVehicleDragSpeed = SelectedVehicle.DragSpeed.ToString();
        }
    }

    async Task AddEditNewVehicle()
    {
        try
        {
            SelectedVehicle.ClassId = Convert.ToInt32(SelectedVehicleClassId);
            SelectedVehicle.DragSpeed = Convert.ToDecimal(SelectedVehicleDragSpeed);

            if (SelectedVehicle.Id == 0)  // new vehicle add
            {
                var result = await @Service.AddNewVehicleToGame(SelectedVehicle);
            }
            else  // existing vehicle edit
            {
                var result = await @Service.EditVehicleInGame(SelectedVehicle);
            }

            CloseAdminPopup();
        }
        catch (Exception ex)
        {
            strEditVehicleError = ex.Message;
        }
    }

    void CloseAdminPopup()
    {
        // Close the Popup
        ShowAdminPopup = false;
    }
}
