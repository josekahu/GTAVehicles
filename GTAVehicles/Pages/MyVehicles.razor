@page "/myvehicles"
@using GTAVehicles.Data
@using GTAVehicles.Models
@using System.Linq;
@inject AuthenticationStateProvider AuthenticationStateProvider
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in ForecastService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.

    We access WeatherForecastService using @Service
*@
@inherits OwningComponentBase<GTAVehiclesService>
<h3>MyVehicles</h3>
<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <RadzenDropDown AllowFiltering="false"
                        @bind-Value="SelectedCharacterId"
                        Placeholder="Select Character..."
                        Data="@characters"
                        TextProperty="UserName"
                        ValueProperty="Id"
                        Change="UpdateCharacter"
                        Style="margin-bottom: 20px; width:250px;" />

        <div class="row">
            <div class="col-md-6">
                <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                            Data="@SelectedCharacter.GtaplayerGarages"
                            TItem="GtaplayerGarages"
                            RowSelect="@(args => LoadVehicles(args))">
                    <Columns>
                        <RadzenGridColumn TItem="GtaplayerGarages" Property="GarageName" Title="Garage Name" />
                    </Columns>
                </RadzenGrid>
            </div>
            <div class="col-md-6">
                <RadzenGrid @ref="DataGridRef" AllowFiltering="true" AllowPaging="true" AllowSorting="true"
                            Data="@colGTAVehiclesOwned" TItem="GTAVehiclesOwned">
                    <Columns>
                        <RadzenGridColumn TItem="GTAVehiclesOwned" Context="PlayerVehicle" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                            <Template Context="PlayerVehicle">
                                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(() => MoveOrRemoveVehicle(PlayerVehicle))">
                                </RadzenButton>
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="GTAVehiclesOwned" Property="VehicleModel" Title="Model Name" />
                    </Columns>
                </RadzenGrid>
            </div>
        </div>

        @if (ShowVehiclePopup)
        {
            <!-- This is the popup to move or remove a PlayerVehicle -->
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">Move/Remove Vehicle</h3>
                            <!-- Button to close the popup -->
                            <button type="button" class="close"
                                    @onclick="CloseVehiclePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <!-- Edit form for the current Vehicle -->
                        <div class="modal-body">
                            <RadzenDropDown AllowFiltering="false"
                                            AllowClear="true"
                                            @bind-Value="TransferGarage"
                                            Multiple="false"
                                            Placeholder="Select New Garage..."
                                            Data="@(garages.Where(o => o.CharacterId.ToString() == SelectedCharacterId && o.Id != SelectedGarage.Id.ToString()))"
                                            TextProperty="GarageName"
                                            Style="margin-bottom: 20px; width:250px;" />
                            <br />
                            <!-- Button to save the garage -->
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                          Click="MoveVehicleToNewGarage" Text="Move to New Garage" />

                            <!-- Only show delete button if not a new record -->
                            @if (SelectedGarage.Id > 0)
                            {
                                <!-- Button to delete the garage -->
                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="DeleteVehicle" Text="Remove from Game" />
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in. Please click [Log-In] to continue.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    // AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    RadzenGrid<GTAVehiclesOwned> DataGridRef;
    Gtaplayers player;
    List<GtacharactersDTO> characters;
    List<GTAVehiclesOwned> colGTAVehiclesOwned = new List<GTAVehiclesOwned>();
    GtacharactersDTO SelectedCharacter = new GtacharactersDTO();
    string SelectedCharacterId = "";
    List<GtaplayerGaragesDTO> garages;
    GtaplayerGarages SelectedGarage = new GtaplayerGarages();
    GtaplayerGaragesDTO TransferGarage = new GtaplayerGaragesDTO();
    GtaplayerVehicles SelectedVehicle = new GtaplayerVehicles();
    bool ShowVehiclePopup = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var user = (await authenticationStateTask).User;
        if (user.Identity.Name != null)
        {
            // Get the player object for the current user
            player = await @Service.GetPlayerAsync(user.Identity.Name);

            characters = await @Service.GetCharactersDTOAsync(player);

            if(characters.FirstOrDefault() != null)
            { 
                SelectedCharacterId = characters.FirstOrDefault().Id.ToString();
                UpdateCharacter();
            }
        }
    }

    void UpdateCharacter()
    {
        if (SelectedCharacterId != "")
        {
            SelectedCharacter = characters.Where(x => x.Id == SelectedCharacterId).FirstOrDefault();
        }
    }

    async Task LoadVehicles(GtaplayerGarages param)
    {
        SelectedGarage = param;

        var result = await @Service.GetGTAVehiclesOwnedAsync(Convert.ToInt32(SelectedGarage.Id));
        colGTAVehiclesOwned = result.ToList();

        if (DataGridRef != null)
        {
            DataGridRef.FirstPage();
        }
    }

    async Task MoveOrRemoveVehicle(GTAVehiclesOwned vehicle)
    {
        garages = await @Service.GetGaragesForPlayerAsync(player);
        SelectedVehicle = await Service.GetGTAPlayerVehicleAsync(vehicle);
        ShowVehiclePopup = true;
    }

    void CloseVehiclePopup()
    {
        ShowVehiclePopup = false;
    }

    async Task MoveVehicleToNewGarage()
    {
        // Get the record to alter
        var result = await @Service.TransferVehicleAsync(SelectedVehicle, TransferGarage);
        await LoadVehicles(SelectedGarage);
        CloseVehiclePopup();
    }

    async Task DeleteVehicle()
    {
        var result = await @Service.RemoveVehicleAsync(SelectedVehicle);
        await LoadVehicles(SelectedGarage);
        CloseVehiclePopup();
    }
}
