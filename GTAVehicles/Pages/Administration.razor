@page "/administration"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using GTAVehicles.Models;
@using System.Linq;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            @if (ColUsers == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                            AllowPaging="true" PageSize="4" AllowSorting="true" Data="@ColUsers" 
                            TItem="IdentityUserDTO" ColumnWidth="200px">
                    <Columns>
                        <RadzenGridColumn TItem="IdentityUserDTO" Property="user" Title="Edit" Width="20px">
                            <Template Context="user">
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                              Click="@(() => EditUser(user))" Icon="edit" Style="align-content:center;">
                                </RadzenButton>
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="IdentityUserDTO" Property="IdentityUserUserName" Title="User Name" />
                        <RadzenGridColumn TItem="IdentityUserDTO" Property="UserEmail" Title="Email" />
                    </Columns>
                </RadzenGrid>
            }
            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a user -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit User</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form -->
                            <div class="modal-body">
                                <!-- Only show Id if not a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                <!-- Only allow edit if a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.IdentityUserUserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text"
                                           placeholder="UserName"
                                           @bind="objUser.IdentityUserUserName" />
                                }
                                <input class="form-control" type="text"
                                       placeholder="Email"
                                       @bind="objUser.UserEmail" />
                                <input class="form-control" type="password"
                                       placeholder="Password"
                                       @bind="objUser.PasswordHash" />
                                <select class="form-control"
                                        @bind="@CurrentUserRole">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />
                                <!-- Button to save the user -->
                                <RadzenButton  ButtonStyle="ButtonStyle.Success"
                                        Click="SaveUser" Text="Save" />
                                <!-- Only show delete button if not a new record -->
                                @if (objUser.Id != "")
                                {
                                    <!-- Button to delete the User -->
                                    <RadzenButton  ButtonStyle="ButtonStyle.Danger"
                                            Click="DeleteUser" Text="Delete" />
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <br /><button class="btn btn-success" @onclick="AddNewUser">Add User</button>
        }
        else
        {
            <p>You're not signed in as a user in @ADMINISTRATION_ROLE.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string ADMINISTRATION_ROLE = "Administrators";
    IdentityUserDTO objUser = new IdentityUserDTO();
    List<IdentityUserDTO> ColUsers = new List<IdentityUserDTO>();

    List<string> Options = new List<string>() { "Users", "Administrators" };
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    string CurrentUserRole { get; set; } = "Users";
    string strError = "";
    bool ShowPopup = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        // Get the users
        GetUsers();
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    public void GetUsers()
    {
        // clear any error messages
        strError = "";

        // Collection to hold users
        ColUsers = new List<IdentityUserDTO>();

        // get users from _UserManager
        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });

        foreach (var item in user)
        {
            var NewUser = new IdentityUserDTO
            {
                Id =  item.Id,
                IdentityUserUserName = item.UserName,
                UserEmail = item.Email,
                PasswordHash = "*****"
            };

            ColUsers.Add(NewUser);
        }
    }

    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUserDTO();
        objUser.PasswordHash = "*****";

        // Set Id to blank so we know it is a new record
        objUser.Id = "";

        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // Get the user
                var user = await _UserManager.FindByIdAsync(objUser.Id);

                // Update Email
                user.Email = objUser.UserEmail;

                // Update the user
                await _UserManager.UpdateAsync(user);

                // Only update password if the current value
                // is not the default value
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser = await _UserManager.ResetPasswordAsync(user, resetToken, objUser.PasswordHash);

                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError = passworduser.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }

                        // Keep the popup opened
                        return;
                    }
                }

                // Handle Roles

                // Is user in administrator role?
                var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

                // Is Administrator role selected but user is not an Administrator?
                if ((CurrentUserRole == ADMINISTRATION_ROLE) & (!UserResult))
                {
                    // Put admin in Administrator role
                    await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    // Is Administrator role not selected but user is an Administrator?
                    if ((CurrentUserRole != ADMINISTRATION_ROLE) & (UserResult))
                    {
                        // Remove user from Administrator role
                        await _UserManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }
            }
            else
            {
                // Insert new user

                var NewUser =
                    new IdentityUser
                    {
                        UserName = objUser.IdentityUserUserName,
                        Email = objUser.UserEmail
                    };

                var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);

                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }

                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        // Put admin in Administrator role
                        await _UserManager.AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                }
            }

            // Close the Popup
            ShowPopup = false;

            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task EditUser(IdentityUserDTO _IdentityUser)
    {
        // Set the selected user
        // as the current user
        objUser = _IdentityUser;

        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }

        // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;

        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Delete the user
            await _UserManager.DeleteAsync(user);
        }

        // Refresh Users
        GetUsers();
    }
}
